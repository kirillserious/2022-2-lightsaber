import numpy as np

from common import Model, Vector

def angles(model: Model, pos: Vector):
    l = model.l
    x = pos[0]
    y = pos[1]

    if (x**2 + y**2) > (l[0] + l[1])**2:
        return None

    res = [
        {
            "q[0]": -np.arccos((x - np.cos(2*np.arctan((2*y*l[1] - np.sqrt(-x**4 - 2*x**2*y**2 + 2*x**2*l[0]**2 + 2*x**2*l[1]**2 - y**4 + 2*y**2*l[0]**2 + 2*y**2*l[1]**2 - l[0]**4 + 2*l[0]**2*l[1]**2 - l[1]**4))/(x**2 + 2*x*l[1] + y**2 - l[0]**2 + l[1]**2)))*l[1])/l[0]) + 2*np.pi,
            "q[1]": 2*np.arctan((2*y*l[1] - np.sqrt(-x**4 - 2*x**2*y**2 + 2*x**2*l[0]**2 + 2*x**2*l[1]**2 - y**4 + 2*y**2*l[0]**2 + 2*y**2*l[1]**2 - l[0]**4 + 2*l[0]**2*l[1]**2 - l[1]**4))/(x**2 + 2*x*l[1] + y**2 - l[0]**2 + l[1]**2))
        },
        {
            "q[0]": -np.arccos((x - np.cos(2*np.arctan((2*y*l[1] + np.sqrt(-x**4 - 2*x**2*y**2 + 2*x**2*l[0]**2 + 2*x**2*l[1]**2 - y**4 + 2*y**2*l[0]**2 + 2*y**2*l[1]**2 - l[0]**4 + 2*l[0]**2*l[1]**2 - l[1]**4))/(x**2 + 2*x*l[1] + y**2 - l[0]**2 + l[1]**2)))*l[1])/l[0]) + 2*np.pi,
            "q[1]": 2*np.arctan((2*y*l[1] + np.sqrt(-x**4 - 2*x**2*y**2 + 2*x**2*l[0]**2 + 2*x**2*l[1]**2 - y**4 + 2*y**2*l[0]**2 + 2*y**2*l[1]**2 - l[0]**4 + 2*l[0]**2*l[1]**2 - l[1]**4))/(x**2 + 2*x*l[1] + y**2 - l[0]**2 + l[1]**2))
        },
        {
            "q[0]": np.arccos((x - np.cos(2*np.arctan((2*y*l[1] - np.sqrt(-x**4 - 2*x**2*y**2 + 2*x**2*l[0]**2 + 2*x**2*l[1]**2 - y**4 + 2*y**2*l[0]**2 + 2*y**2*l[1]**2 - l[0]**4 + 2*l[0]**2*l[1]**2 - l[1]**4))/(x**2 + 2*x*l[1] + y**2 - l[0]**2 + l[1]**2)))*l[1])/l[0]),
            "q[1]": 2*np.arctan((2*y*l[1] - np.sqrt(-x**4 - 2*x**2*y**2 + 2*x**2*l[0]**2 + 2*x**2*l[1]**2 - y**4 + 2*y**2*l[0]**2 + 2*y**2*l[1]**2 - l[0]**4 + 2*l[0]**2*l[1]**2 - l[1]**4))/(x**2 + 2*x*l[1] + y**2 - l[0]**2 + l[1]**2))
        },
        {
            "q[0]": np.arccos((x - np.cos(2*np.arctan((2*y*l[1] + np.sqrt(-x**4 - 2*x**2*y**2 + 2*x**2*l[0]**2 + 2*x**2*l[1]**2 - y**4 + 2*y**2*l[0]**2 + 2*y**2*l[1]**2 - l[0]**4 + 2*l[0]**2*l[1]**2 - l[1]**4))/(x**2 + 2*x*l[1] + y**2 - l[0]**2 + l[1]**2)))*l[1])/l[0]),
            "q[1]": 2*np.arctan((2*y*l[1] + np.sqrt(-x**4 - 2*x**2*y**2 + 2*x**2*l[0]**2 + 2*x**2*l[1]**2 - y**4 + 2*y**2*l[0]**2 + 2*y**2*l[1]**2 - l[0]**4 + 2*l[0]**2*l[1]**2 - l[1]**4))/(x**2 + 2*x*l[1] + y**2 - l[0]**2 + l[1]**2))
        },
    ]

    new_res = []
    for i in range(len(res)):
        if res[i]["q[0]"] > np.pi or res[i]["q[0]"] < -np.pi or res[i]["q[0]"] > np.pi or res[i]["q[0]"] < -np.pi:
            continue
        new_res += [Vector([res[i]['q[0]'], res[i]['q[1]']])]
    return new_res