import numpy as np

from common import Model, Vector, Matrix

def M_inv(model: Model, z: Vector)->Matrix:
    l = model.l
    m = model.m
    I = model.I
    g = model.g

    return Matrix([
    [
        (-l[0]*l[1]*(m[1]/2 - m[2])*(-l[0]*l[1]*(m[1]/2 - m[2])*np.cos(z[0] - z[1])/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) - (l[0]*l[1]*(m[1]/2 - m[2])*(-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*np.cos(z[1] - z[2])/2)*np.cos(z[0] - z[1])/((I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))*(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])) - l[0]*l[2]*m[2]*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))))*(-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*np.cos(z[1] - z[2])/2)/(I[2] - l[0]**2*l[2]**2*m[2]**2*np.cos(z[0] - z[2])**2/(4*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[2]**2*m[2]/4 - (-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*np.cos(z[1] - z[2])/2)**2/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])))*np.cos(z[0] - z[1])/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2]) - l[0]*l[2]*m[2]*(l[0]*l[1]*(m[1]/2 - m[2])*(-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*np.cos(z[1] - z[2])/2)*np.cos(z[0] - z[1])/((I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))*(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])) - l[0]*l[2]*m[2]*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))))*np.cos(z[0] - z[2])/(2*(I[2] - l[0]**2*l[2]**2*m[2]**2*np.cos(z[0] - z[2])**2/(4*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[2]**2*m[2]/4 - (-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*np.cos(z[1] - z[2])/2)**2/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2]))) + 1)/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))
        ,
        (-l[0]*l[1]*(m[1]/2 - m[2])*((-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*np.cos(z[1] - z[2])/2)**2/((I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])*(I[2] - l[0]**2*l[2]**2*m[2]**2*np.cos(z[0] - z[2])**2/(4*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[2]**2*m[2]/4 - (-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*np.cos(z[1] - z[2])/2)**2/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2]))) + 1)*np.cos(z[0] - z[1])/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2]) + l[0]*l[2]*m[2]*(-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*np.cos(z[1] - z[2])/2)*np.cos(z[0] - z[2])/(2*(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])*(I[2] - l[0]**2*l[2]**2*m[2]**2*np.cos(z[0] - z[2])**2/(4*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[2]**2*m[2]/4 - (-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*np.cos(z[1] - z[2])/2)**2/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2]))))/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))
        ,
        (l[0]*l[1]*(m[1]/2 - m[2])*(-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*np.cos(z[1] - z[2])/2)*np.cos(z[0] - z[1])/((I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])*(I[2] - l[0]**2*l[2]**2*m[2]**2*np.cos(z[0] - z[2])**2/(4*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[2]**2*m[2]/4 - (-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*np.cos(z[1] - z[2])/2)**2/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2]))) - l[0]*l[2]*m[2]*np.cos(z[0] - z[2])/(2*(I[2] - l[0]**2*l[2]**2*m[2]**2*np.cos(z[0] - z[2])**2/(4*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[2]**2*m[2]/4 - (-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*np.cos(z[1] - z[2])/2)**2/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2]))))/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))
    ]
    ,
    [
        (-l[0]*l[1]*(m[1]/2 - m[2])*np.cos(z[0] - z[1])/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) - (l[0]*l[1]*(m[1]/2 - m[2])*(-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*np.cos(z[1] - z[2])/2)*np.cos(z[0] - z[1])/((I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))*(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])) - l[0]*l[2]*m[2]*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))))*(-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*np.cos(z[1] - z[2])/2)/(I[2] - l[0]**2*l[2]**2*m[2]**2*np.cos(z[0] - z[2])**2/(4*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[2]**2*m[2]/4 - (-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*np.cos(z[1] - z[2])/2)**2/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])))/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])
        ,
        ((-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*np.cos(z[1] - z[2])/2)**2/((I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])*(I[2] - l[0]**2*l[2]**2*m[2]**2*np.cos(z[0] - z[2])**2/(4*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[2]**2*m[2]/4 - (-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*np.cos(z[1] - z[2])/2)**2/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2]))) + 1)/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])
        ,
        -(-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*np.cos(z[1] - z[2])/2)/((I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])*(I[2] - l[0]**2*l[2]**2*m[2]**2*np.cos(z[0] - z[2])**2/(4*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[2]**2*m[2]/4 - (-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*np.cos(z[1] - z[2])/2)**2/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])))
    ]
    ,
    [
        (l[0]*l[1]*(m[1]/2 - m[2])*(-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*np.cos(z[1] - z[2])/2)*np.cos(z[0] - z[1])/((I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))*(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])) - l[0]*l[2]*m[2]*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))))/(I[2] - l[0]**2*l[2]**2*m[2]**2*np.cos(z[0] - z[2])**2/(4*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[2]**2*m[2]/4 - (-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*np.cos(z[1] - z[2])/2)**2/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2]))
        ,
        -(-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*np.cos(z[1] - z[2])/2)/((I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])*(I[2] - l[0]**2*l[2]**2*m[2]**2*np.cos(z[0] - z[2])**2/(4*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[2]**2*m[2]/4 - (-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*np.cos(z[1] - z[2])/2)**2/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])))
        ,
        1/(I[2] - l[0]**2*l[2]**2*m[2]**2*np.cos(z[0] - z[2])**2/(4*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[2]**2*m[2]/4 - (-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*np.cos(z[1] - z[2])/2)**2/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2]))
    ]
])