import numpy as np

from common import Vector, Matrix
from common import m, l, I, g, delta_t

def fk_u(z: Vector, u: Vector)->Matrix:
    '''
        fk_u - Якобиан функции fk(z, u) по u
    '''
    return Matrix([[0, 0, 0], [0, 0, 0], [0, 0, 0], [delta_t*(-(-(np.cos(z[1] - z[2])*l[1]*l[2]*m[2]/2 - (m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])*l[0]**2*l[1]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]))*(-np.cos(z[0] - z[2])*l[0]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]) + (np.cos(z[1] - z[2])*l[1]*l[2]*m[2]/2 - (m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])*l[0]**2*l[1]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]))*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*l[0]*l[1]/(((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0])*(I[1] + l[1]**2*m[1]/4 + l[1]**2*m[2] - (m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2*l[0]**2*l[1]**2/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0]))))/(-(np.cos(z[1] - z[2])*l[1]*l[2]*m[2]/2 - (m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])*l[0]**2*l[1]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]))**2/(I[1] + l[1]**2*m[1]/4 + l[1]**2*m[2] - (m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2*l[0]**2*l[1]**2/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0])) + I[2] + l[2]**2*m[2]/4 - np.cos(z[0] - z[2])**2*l[0]**2*l[2]**2*m[2]**2/(4*(m[0]/4 + m[1] + m[2])*l[0]**2 + 4*I[0])) - (m[1]/2 - m[2])*np.cos(z[0] - z[1])*l[0]*l[1]/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0]))*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*l[0]*l[1]/(I[1] + l[1]**2*m[1]/4 + l[1]**2*m[2] - (m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2*l[0]**2*l[1]**2/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0])) - (-np.cos(z[0] - z[2])*l[0]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]) + (np.cos(z[1] - z[2])*l[1]*l[2]*m[2]/2 - (m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])*l[0]**2*l[1]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]))*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*l[0]*l[1]/(((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0])*(I[1] + l[1]**2*m[1]/4 + l[1]**2*m[2] - (m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2*l[0]**2*l[1]**2/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0]))))*np.cos(z[0] - z[2])*l[0]*l[2]*m[2]/(-2*(np.cos(z[1] - z[2])*l[1]*l[2]*m[2]/2 - (m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])*l[0]**2*l[1]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]))**2/(I[1] + l[1]**2*m[1]/4 + l[1]**2*m[2] - (m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2*l[0]**2*l[1]**2/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0])) + 2*I[2] + l[2]**2*m[2]/2 - 2*np.cos(z[0] - z[2])**2*l[0]**2*l[2]**2*m[2]**2/(4*(m[0]/4 + m[1] + m[2])*l[0]**2 + 4*I[0])) + 1)/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0]), delta_t*(-((np.cos(z[1] - z[2])*l[1]*l[2]*m[2]/2 - (m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])*l[0]**2*l[1]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]))**2/((-(np.cos(z[1] - z[2])*l[1]*l[2]*m[2]/2 - (m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])*l[0]**2*l[1]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]))**2/(I[1] + l[1]**2*m[1]/4 + l[1]**2*m[2] - (m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2*l[0]**2*l[1]**2/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0])) + I[2] + l[2]**2*m[2]/4 - np.cos(z[0] - z[2])**2*l[0]**2*l[2]**2*m[2]**2/(4*(m[0]/4 + m[1] + m[2])*l[0]**2 + 4*I[0]))*(I[1] + l[1]**2*m[1]/4 + l[1]**2*m[2] - (m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2*l[0]**2*l[1]**2/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0]))) + 1)*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*l[0]*l[1]/(I[1] + l[1]**2*m[1]/4 + l[1]**2*m[2] - (m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2*l[0]**2*l[1]**2/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0])) + (np.cos(z[1] - z[2])*l[1]*l[2]*m[2]/2 - (m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])*l[0]**2*l[1]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]))*np.cos(z[0] - z[2])*l[0]*l[2]*m[2]/((-(np.cos(z[1] - z[2])*l[1]*l[2]*m[2]/2 - (m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])*l[0]**2*l[1]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]))**2/(I[1] + l[1]**2*m[1]/4 + l[1]**2*m[2] - (m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2*l[0]**2*l[1]**2/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0])) + I[2] + l[2]**2*m[2]/4 - np.cos(z[0] - z[2])**2*l[0]**2*l[2]**2*m[2]**2/(4*(m[0]/4 + m[1] + m[2])*l[0]**2 + 4*I[0]))*(2*I[1] + l[1]**2*m[1]/2 + 2*l[1]**2*m[2] - 2*(m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2*l[0]**2*l[1]**2/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0]))))/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0]), delta_t*((np.cos(z[1] - z[2])*l[1]*l[2]*m[2]/2 - (m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])*l[0]**2*l[1]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]))*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*l[0]*l[1]/((-(np.cos(z[1] - z[2])*l[1]*l[2]*m[2]/2 - (m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])*l[0]**2*l[1]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]))**2/(I[1] + l[1]**2*m[1]/4 + l[1]**2*m[2] - (m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2*l[0]**2*l[1]**2/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0])) + I[2] + l[2]**2*m[2]/4 - np.cos(z[0] - z[2])**2*l[0]**2*l[2]**2*m[2]**2/(4*(m[0]/4 + m[1] + m[2])*l[0]**2 + 4*I[0]))*(I[1] + l[1]**2*m[1]/4 + l[1]**2*m[2] - (m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2*l[0]**2*l[1]**2/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0]))) - np.cos(z[0] - z[2])*l[0]*l[2]*m[2]/(-2*(np.cos(z[1] - z[2])*l[1]*l[2]*m[2]/2 - (m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])*l[0]**2*l[1]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]))**2/(I[1] + l[1]**2*m[1]/4 + l[1]**2*m[2] - (m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2*l[0]**2*l[1]**2/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0])) + 2*I[2] + l[2]**2*m[2]/2 - 2*np.cos(z[0] - z[2])**2*l[0]**2*l[2]**2*m[2]**2/(4*(m[0]/4 + m[1] + m[2])*l[0]**2 + 4*I[0])))/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0])], [delta_t*(-(np.cos(z[1] - z[2])*l[1]*l[2]*m[2]/2 - (m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])*l[0]**2*l[1]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]))*(-np.cos(z[0] - z[2])*l[0]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]) + (np.cos(z[1] - z[2])*l[1]*l[2]*m[2]/2 - (m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])*l[0]**2*l[1]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]))*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*l[0]*l[1]/(((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0])*(I[1] + l[1]**2*m[1]/4 + l[1]**2*m[2] - (m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2*l[0]**2*l[1]**2/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0]))))/(-(np.cos(z[1] - z[2])*l[1]*l[2]*m[2]/2 - (m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])*l[0]**2*l[1]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]))**2/(I[1] + l[1]**2*m[1]/4 + l[1]**2*m[2] - (m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2*l[0]**2*l[1]**2/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0])) + I[2] + l[2]**2*m[2]/4 - np.cos(z[0] - z[2])**2*l[0]**2*l[2]**2*m[2]**2/(4*(m[0]/4 + m[1] + m[2])*l[0]**2 + 4*I[0])) - (m[1]/2 - m[2])*np.cos(z[0] - z[1])*l[0]*l[1]/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0]))/(I[1] + l[1]**2*m[1]/4 + l[1]**2*m[2] - (m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2*l[0]**2*l[1]**2/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0])), delta_t*((np.cos(z[1] - z[2])*l[1]*l[2]*m[2]/2 - (m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])*l[0]**2*l[1]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]))**2/((-(np.cos(z[1] - z[2])*l[1]*l[2]*m[2]/2 - (m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])*l[0]**2*l[1]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]))**2/(I[1] + l[1]**2*m[1]/4 + l[1]**2*m[2] - (m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2*l[0]**2*l[1]**2/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0])) + I[2] + l[2]**2*m[2]/4 - np.cos(z[0] - z[2])**2*l[0]**2*l[2]**2*m[2]**2/(4*(m[0]/4 + m[1] + m[2])*l[0]**2 + 4*I[0]))*(I[1] + l[1]**2*m[1]/4 + l[1]**2*m[2] - (m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2*l[0]**2*l[1]**2/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0]))) + 1)/(I[1] + l[1]**2*m[1]/4 + l[1]**2*m[2] - (m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2*l[0]**2*l[1]**2/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0])), delta_t*(-np.cos(z[1] - z[2])*l[1]*l[2]*m[2]/2 + (m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])*l[0]**2*l[1]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]))/((-(np.cos(z[1] - z[2])*l[1]*l[2]*m[2]/2 - (m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])*l[0]**2*l[1]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]))**2/(I[1] + l[1]**2*m[1]/4 + l[1]**2*m[2] - (m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2*l[0]**2*l[1]**2/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0])) + I[2] + l[2]**2*m[2]/4 - np.cos(z[0] - z[2])**2*l[0]**2*l[2]**2*m[2]**2/(4*(m[0]/4 + m[1] + m[2])*l[0]**2 + 4*I[0]))*(I[1] + l[1]**2*m[1]/4 + l[1]**2*m[2] - (m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2*l[0]**2*l[1]**2/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0])))], [delta_t*(-np.cos(z[0] - z[2])*l[0]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]) + (np.cos(z[1] - z[2])*l[1]*l[2]*m[2]/2 - (m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])*l[0]**2*l[1]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]))*(m[1]/2 - m[2])*np.cos(z[0] - z[1])*l[0]*l[1]/(((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0])*(I[1] + l[1]**2*m[1]/4 + l[1]**2*m[2] - (m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2*l[0]**2*l[1]**2/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0]))))/(-(np.cos(z[1] - z[2])*l[1]*l[2]*m[2]/2 - (m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])*l[0]**2*l[1]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]))**2/(I[1] + l[1]**2*m[1]/4 + l[1]**2*m[2] - (m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2*l[0]**2*l[1]**2/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0])) + I[2] + l[2]**2*m[2]/4 - np.cos(z[0] - z[2])**2*l[0]**2*l[2]**2*m[2]**2/(4*(m[0]/4 + m[1] + m[2])*l[0]**2 + 4*I[0])), delta_t*(-np.cos(z[1] - z[2])*l[1]*l[2]*m[2]/2 + (m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])*l[0]**2*l[1]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]))/((-(np.cos(z[1] - z[2])*l[1]*l[2]*m[2]/2 - (m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])*l[0]**2*l[1]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]))**2/(I[1] + l[1]**2*m[1]/4 + l[1]**2*m[2] - (m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2*l[0]**2*l[1]**2/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0])) + I[2] + l[2]**2*m[2]/4 - np.cos(z[0] - z[2])**2*l[0]**2*l[2]**2*m[2]**2/(4*(m[0]/4 + m[1] + m[2])*l[0]**2 + 4*I[0]))*(I[1] + l[1]**2*m[1]/4 + l[1]**2*m[2] - (m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2*l[0]**2*l[1]**2/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0]))), delta_t/(-(np.cos(z[1] - z[2])*l[1]*l[2]*m[2]/2 - (m[1]/2 - m[2])*np.cos(z[0] - z[1])*np.cos(z[0] - z[2])*l[0]**2*l[1]*l[2]*m[2]/(2*(m[0]/4 + m[1] + m[2])*l[0]**2 + 2*I[0]))**2/(I[1] + l[1]**2*m[1]/4 + l[1]**2*m[2] - (m[1]/2 - m[2])**2*np.cos(z[0] - z[1])**2*l[0]**2*l[1]**2/((m[0]/4 + m[1] + m[2])*l[0]**2 + I[0])) + I[2] + l[2]**2*m[2]/4 - np.cos(z[0] - z[2])**2*l[0]**2*l[2]**2*m[2]**2/(4*(m[0]/4 + m[1] + m[2])*l[0]**2 + 4*I[0]))]])
