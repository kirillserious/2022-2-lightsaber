#!/usr/bin/python3

import sympy

# Параметры программы
links_count = 3
calculate_inertia = False #True

# Константы
g = sympy.Symbol('g') # Ускорение свободного падения

# Параметры задачи
## Длина каждого звена
l = sympy.symbols('l(:%d)'%(links_count))
## Масса каждого звена 
m = sympy.symbols('m(:%d)'%(links_count))
## Моменты инерции каждого звена
if calculate_inertia:
    I = [
        m[i] * l[i] * l[i] / 3
        for i in range(0, links_count)
    ]
else:
    I = [
        sympy.symbols('I' + str(i))
        for i in range(0, links_count)
    ]

# Фазовые переменные
t = sympy.symbols('t')
z = sympy.symbols('z(:%d)'%(links_count*2))
z_vec = sympy.Matrix([
    [z[i]] for i in range(len(z))
])

u = sympy.symbols('u(:%d)'%(links_count))
u_vec = sympy.Matrix([
    [u[i]] for i in range(links_count)
])


M_inv = sympy.Matrix([
    [
        (-l[0]*l[1]*(m[1]/2 - m[2])*(-l[0]*l[1]*(m[1]/2 - m[2])*sympy.cos(z[0] - z[1])/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) - (l[0]*l[1]*(m[1]/2 - m[2])*(-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*sympy.cos(z[0] - z[1])*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*sympy.cos(z[1] - z[2])/2)*sympy.cos(z[0] - z[1])/((I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))*(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*sympy.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])) - l[0]*l[2]*m[2]*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))))*(-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*sympy.cos(z[0] - z[1])*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*sympy.cos(z[1] - z[2])/2)/(I[2] - l[0]**2*l[2]**2*m[2]**2*sympy.cos(z[0] - z[2])**2/(4*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[2]**2*m[2]/4 - (-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*sympy.cos(z[0] - z[1])*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*sympy.cos(z[1] - z[2])/2)**2/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*sympy.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])))*sympy.cos(z[0] - z[1])/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*sympy.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2]) - l[0]*l[2]*m[2]*(l[0]*l[1]*(m[1]/2 - m[2])*(-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*sympy.cos(z[0] - z[1])*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*sympy.cos(z[1] - z[2])/2)*sympy.cos(z[0] - z[1])/((I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))*(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*sympy.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])) - l[0]*l[2]*m[2]*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))))*sympy.cos(z[0] - z[2])/(2*(I[2] - l[0]**2*l[2]**2*m[2]**2*sympy.cos(z[0] - z[2])**2/(4*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[2]**2*m[2]/4 - (-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*sympy.cos(z[0] - z[1])*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*sympy.cos(z[1] - z[2])/2)**2/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*sympy.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2]))) + 1)/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))
        ,
        (-l[0]*l[1]*(m[1]/2 - m[2])*((-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*sympy.cos(z[0] - z[1])*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*sympy.cos(z[1] - z[2])/2)**2/((I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*sympy.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])*(I[2] - l[0]**2*l[2]**2*m[2]**2*sympy.cos(z[0] - z[2])**2/(4*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[2]**2*m[2]/4 - (-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*sympy.cos(z[0] - z[1])*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*sympy.cos(z[1] - z[2])/2)**2/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*sympy.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2]))) + 1)*sympy.cos(z[0] - z[1])/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*sympy.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2]) + l[0]*l[2]*m[2]*(-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*sympy.cos(z[0] - z[1])*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*sympy.cos(z[1] - z[2])/2)*sympy.cos(z[0] - z[2])/(2*(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*sympy.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])*(I[2] - l[0]**2*l[2]**2*m[2]**2*sympy.cos(z[0] - z[2])**2/(4*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[2]**2*m[2]/4 - (-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*sympy.cos(z[0] - z[1])*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*sympy.cos(z[1] - z[2])/2)**2/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*sympy.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2]))))/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))
        ,
        (l[0]*l[1]*(m[1]/2 - m[2])*(-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*sympy.cos(z[0] - z[1])*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*sympy.cos(z[1] - z[2])/2)*sympy.cos(z[0] - z[1])/((I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*sympy.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])*(I[2] - l[0]**2*l[2]**2*m[2]**2*sympy.cos(z[0] - z[2])**2/(4*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[2]**2*m[2]/4 - (-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*sympy.cos(z[0] - z[1])*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*sympy.cos(z[1] - z[2])/2)**2/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*sympy.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2]))) - l[0]*l[2]*m[2]*sympy.cos(z[0] - z[2])/(2*(I[2] - l[0]**2*l[2]**2*m[2]**2*sympy.cos(z[0] - z[2])**2/(4*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[2]**2*m[2]/4 - (-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*sympy.cos(z[0] - z[1])*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*sympy.cos(z[1] - z[2])/2)**2/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*sympy.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2]))))/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))
    ]
    ,
    [
        (-l[0]*l[1]*(m[1]/2 - m[2])*sympy.cos(z[0] - z[1])/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) - (l[0]*l[1]*(m[1]/2 - m[2])*(-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*sympy.cos(z[0] - z[1])*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*sympy.cos(z[1] - z[2])/2)*sympy.cos(z[0] - z[1])/((I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))*(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*sympy.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])) - l[0]*l[2]*m[2]*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))))*(-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*sympy.cos(z[0] - z[1])*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*sympy.cos(z[1] - z[2])/2)/(I[2] - l[0]**2*l[2]**2*m[2]**2*sympy.cos(z[0] - z[2])**2/(4*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[2]**2*m[2]/4 - (-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*sympy.cos(z[0] - z[1])*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*sympy.cos(z[1] - z[2])/2)**2/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*sympy.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])))/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*sympy.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])
        ,
        ((-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*sympy.cos(z[0] - z[1])*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*sympy.cos(z[1] - z[2])/2)**2/((I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*sympy.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])*(I[2] - l[0]**2*l[2]**2*m[2]**2*sympy.cos(z[0] - z[2])**2/(4*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[2]**2*m[2]/4 - (-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*sympy.cos(z[0] - z[1])*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*sympy.cos(z[1] - z[2])/2)**2/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*sympy.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2]))) + 1)/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*sympy.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])
        ,
        -(-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*sympy.cos(z[0] - z[1])*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*sympy.cos(z[1] - z[2])/2)/((I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*sympy.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])*(I[2] - l[0]**2*l[2]**2*m[2]**2*sympy.cos(z[0] - z[2])**2/(4*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[2]**2*m[2]/4 - (-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*sympy.cos(z[0] - z[1])*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*sympy.cos(z[1] - z[2])/2)**2/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*sympy.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])))
    ]
    ,
    [
        (l[0]*l[1]*(m[1]/2 - m[2])*(-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*sympy.cos(z[0] - z[1])*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*sympy.cos(z[1] - z[2])/2)*sympy.cos(z[0] - z[1])/((I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))*(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*sympy.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])) - l[0]*l[2]*m[2]*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))))/(I[2] - l[0]**2*l[2]**2*m[2]**2*sympy.cos(z[0] - z[2])**2/(4*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[2]**2*m[2]/4 - (-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*sympy.cos(z[0] - z[1])*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*sympy.cos(z[1] - z[2])/2)**2/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*sympy.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2]))
        ,
        -(-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*sympy.cos(z[0] - z[1])*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*sympy.cos(z[1] - z[2])/2)/((I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*sympy.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])*(I[2] - l[0]**2*l[2]**2*m[2]**2*sympy.cos(z[0] - z[2])**2/(4*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[2]**2*m[2]/4 - (-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*sympy.cos(z[0] - z[1])*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*sympy.cos(z[1] - z[2])/2)**2/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*sympy.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2])))
        ,
        1/(I[2] - l[0]**2*l[2]**2*m[2]**2*sympy.cos(z[0] - z[2])**2/(4*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[2]**2*m[2]/4 - (-l[0]**2*l[1]*l[2]*m[2]*(m[1]/2 - m[2])*sympy.cos(z[0] - z[1])*sympy.cos(z[0] - z[2])/(2*(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2]))) + l[1]*l[2]*m[2]*sympy.cos(z[1] - z[2])/2)**2/(I[1] - l[0]**2*l[1]**2*(m[1]/2 - m[2])**2*sympy.cos(z[0] - z[1])**2/(I[0] + l[0]**2*(m[0]/4 + m[1] + m[2])) + l[1]**2*m[1]/4 + l[1]**2*m[2]))
    ]
])

L = sympy.Matrix([
        [
              g*l[0]*m[0]*sympy.cos(z[0])/2
            + g*l[0]*m[1]*sympy.cos(z[0])
            + g*l[0]*m[2]*sympy.cos(z[0])
            + l[0]*l[1]*m[1]*sympy.sin(z[0] - z[1])*z[4]**2/2
            + l[0]*l[1]*m[2]*sympy.sin(z[0] - z[1])*z[4]**2
            + l[0]*l[2]*m[2]*sympy.sin(z[0] - z[2])*z[5]**2/2
        ],
        [
              g*l[1]*m[1]*sympy.cos(z[1])/2
            + g*l[1]*m[2]*sympy.cos(z[1])
            - l[0]*l[1]*m[1]*sympy.sin(z[0] - z[1])*z[3]**2/2
            - l[0]*l[1]*m[2]*sympy.sin(z[0] - z[1])*z[3]**2
            + l[1]*l[2]*m[2]*sympy.sin(z[1] - z[2])*z[5]**2/2
        ],
        [
              g*l[2]*m[2]*sympy.cos(z[2])/2
            - l[0]*l[2]*m[2]*sympy.sin(z[0] - z[2])*z[3]**2/2
            - l[1]*l[2]*m[2]*sympy.sin(z[1] - z[2])*z[4]**2/2
        ]
    ]
)

f = sympy.Matrix([[z[3]], [z[4]], [z[5]]]).col_join(M_inv * (u_vec - L))

L = u_vec.transpose() * u_vec

lam = sympy.symbols('lambda(:%d)'%(links_count*2))
lam_vec = sympy.Matrix([
    [lam[i]] for i in range(len(z))
])

H = L + lam_vec.transpose() * f

print(sympy.diff(H[0], u_vec))